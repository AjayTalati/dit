.. highlight:: ipy

Quickstart
----------

The basic usage of ``dit`` corresponds to creating distributions, modifying
them if need be, and then computing properties of those distributions.
First, we import::

    In [1]: import dit

Now, we create a distribution representing a biased coin and print it. ::

    In [2]: d = dit.Distribution(['H', 'T'], [.4, .6])

    In [3]: print d
    Class:          Distribution
    Alphabet:       ('H', 'T') for all rvs
    Base:           linear
    Outcome Class:  str
    Outcome Length: 1
    RV Names:       None

    x   p(x)
    H   0.4
    T   0.6

Calculate the probability of :math:`H` and also of the combination:
:math:`H~\mathbf{or}~T`. ::

    In [4]: d['H']
    Out[4]: 0.4

    In [5]: d.event_probability(['H','T'])
    Out[5]: 1.0

Create a distribution representing the :math:`\mathbf{xor}` logic function.
Here, we have two inputs, :math:`X` and :math:`Y`, and then an output
:math:`Z = \mathbf{xor}(X,Y)`. ::

    In [6]: import dit.example_dists

    In [7]: d = dit.example_dists.Xor()

    In [8]: d.set_rv_names(['X', 'Y', 'Z'])

    In [9]: print d
    Class:          Distribution
    Alphabet:       ('0', '1') for all rvs
    Base:           linear
    Outcome Class:  str
    Outcome Length: 3
    RV Names:       ('X', 'Y', 'Z')

    x     p(x)
    000   0.25
    011   0.25
    101   0.25
    110   0.25

Calculate the Shannon entropy and extropy of the joint distribution. ::

    In [10]: dit.algorithms.entropy(d)
    Out[10]: 0.97095059445466858

    In [11]: dit.algorithms.extropy(d)
    Out[11]: 1.2451124978365313

Calculate the Shannon mutual informations :math:`\I[X:Z]`, :math:`\I[Y:Z]`, and
:math:`\I[X,Y:Z]`. ::

    In [12]: dit.algorithms.mutual_information(d, ['X'], ['Z'])
    Out[12]: 0.0

    In [13]: dit.algorithms.mutual_information(d, ['Y'], ['Z'])
    Out[13]: 0.0

    In [14]: dit.algorithms.mutual_information(d, ['X', 'Y'], ['Z'])
    Out[14]: 1.0

Calculate the marginal distribution :math:`P(X,Z)`.
Then print its probabilities as fractions, showing the mask. ::

    In [15]: d2 = d.marginal(['X', 'Z'])

    In [16]: print d2.to_string(show_mask=True, exact=True)
    Class:          Distribution
    Alphabet:       ('0', '1') for all rvs
    Base:           linear
    Outcome Class:  str
    Outcome Length: 2 (mask: 3)
    RV Names:       ('X', 'Z')

    x     p(x)
    0*0   1/4
    0*1   1/4
    1*0   1/4
    1*1   1/4

Convert the distribution probabilities to log (base 3.5)
probabilities, and access its probability mass function. ::

    In [17]: d2.set_base(3.5)

    In [18]: d2.pmf
    array([-1.10658951, -1.10658951, -1.10658951, -1.10658951])

Draw 5 random samples from this distribution. ::

    In [19]: d2.rand(5)
    Out[19]: ['10', '11', '00', '01', '10']


