# After changing this file, check it on:
#   http://lint.travis-ci.org/
#
language: python

python:
  # We don't actually use the Travis Python, but this keeps it organized.
  - "2.7"
  - "3.3"
  - "3.4"
  - "3.5"
  - "nightly"
  - "pypy"
  - "pypy3"

os:
  - linux

matrix:
  fast_finish: true

  include:
    - language: generic
      os: osx
      env: OPTIONAL_DEPS=true

  allow_failures:
    # pypy Wheels are not yet available.
    - python: "pypy"
    - python: "pypy3"
    - python: "nightly"

env:
  matrix:
    - OPTIONAL_DEPS=true
    - OPTIONAL_DEPS=false

before_install:
  ### Prepare the system to install prerequisites or dependencies
  - uname -a
  - printenv
  - if [[ "TRAVIS_OS_NAME" == "linux" ]]; then
      sudo apt-get update -qq;
    elif [[ "TRAVIS_OS_NAME" == "osx" ]]; then
      brew update;
    fi

  # We do this conditionally because it saves us some downloading if the
  # version is the same.
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then
        wget https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh;
      else
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
      fi
    else
      if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then
        wget https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh -O miniconda.sh;
      else
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh;
      fi
    fi
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  # Useful for debugging any issues with conda
  - conda info -a

install:
  ### Install any prerequisites or dependencies necessary to run the build.
  - conda create -q -n test-environment python=$TRAVIS_PYTHON_VERSION pip numpy
  - if [ "${OPTIONAL_DEPS}" == "true" ]; then conda install -n test-environment Cython; fi

  # Skipping pydot (not 3.x compatible)
  # Skipping gdal (errors during pip installs)

  - source activate test-environment

before_script:
  ### Use this to prepare your build for testing
  - conda install -n test-environment nose
  - pip install --upgrade coverage coveralls
  - conda install scipy cvxopt

script:
  - printenv PWD
  - pip install .
  - pip install -r requirements_optional.txt

  - export DIT_INSTALL=`pip show dit | grep Location | awk '{print $2"/dit"}'`
  - echo "DIT_INSTALL=$DIT_INSTALL"

  # nose 1.3.0 does not tell coverage to only cover the requested
  # package (except during the report).  So to restrict coverage, we must
  # inform coverage through the .coveragerc file.
  - cp .coveragerc $DIT_INSTALL
  - cp setup.cfg $DIT_INSTALL

  # Move to new directory so that dit is not imported from repository.
  # Why? Because we want the tests to make sure that dit was installed
  # correctly. Example: setup.py might not have included some submodules.
  # Testing from the git repository cannot catch a mistake like that.
  #
  # Export current directory for logs.
  - cd $DIT_INSTALL
  - printenv PWD

  # Run nosetests.
  - nosetests --verbosity=2 --with-coverage --cover-package=dit

after_success:
  # We must run coveralls from the git repo. But we ran tests from the
  # installed directory. The .coverage file looks like it contains absolute
  # paths, but coveralls does not seem to care.
  - cp .coverage $TRAVIS_BUILD_DIR
  - cd $TRAVIS_BUILD_DIR
  - python fixcoverage.py ".*/dit/" "$TRAVIS_BUILD_DIR/dit/"
  - coveralls

notifications:
  email: false
